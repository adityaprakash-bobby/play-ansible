---
- hosts: all
  become: true 
  tasks: 
    - name: "Ping machine"
      ping:

    - name: Install software-properties-common
      apt: name=software-properties-common state=installed

    # Add ppa for installing PHP 7
    - name: Add the ondrej PHP PPA
      apt_repository: repo='ppa:ondrej/php' 
    
    - name: Update the apt cache
      apt: update_cache=yes cache_valid_time=3600
    
    # Install PHP and remove apache
    - name: Install PHP
      apt: name={{item}} state=installed
      with_items:
      - php
      - php-fpm
      - php-mysql
      - php-xml
    
    - name: Remove apache
      apt: name=apache2 state=removed

    # Install MySQL
    - name: Install MySQL
      apt: name={{item}} state=installed
      with_items:
        - mysql-server
        - python-mysqldb
        - python-pymysql
    
    - name: Generate new root password
      command: openssl rand -hex 7 creates=/root/.my.cnf
      register: mysql_new_root_password
    
    - name: Remove anonymous users
      mysql_user: 
        name: ""
        state: absent
        login_unix_socket: /var/run/mysqld/mysqld.sock
      when: mysql_new_root_password.changed

    - name: Remove test database
      mysql_db: 
        name: test 
        state: absent
        login_unix_socket: /var/run/mysqld/mysqld.sock
      when: mysql_new_root_password.changed
    
    - name: Update root password
      mysql_user: 
        name: root 
        host: "{{ item }}" 
        password: "{{mysql_new_root_password.stdout}}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
      with_items:
        - "{{ ansible_hostname }}"
        - 127.0.0.1
        - ::1
        - localhost
      when: mysql_new_root_password.changed

    - name: Output the new password
      debug: msg="New root password is {{mysql_new_root_password.stdout}}"
      when: mysql_new_root_password.changed
      
    - name: Create the default.conf for MySQL
      template: src=templates/mysql/default.conf dest=/root/.my.cnf
      when: mysql_new_root_password.changed
    
      # Install Nginx to serve the PHP application
    - name: Install Nginx
      apt: name=nginx state=installed
    
    - name: Start Nginx
      service: name=nginx state=started

    - name: Create nginx config
      template: src=templates/nginx/default dest=/etc/nginx/sites-available/default
      notify: Restart Nginx
    
    # Wordpress Installation
    - name: copy wordpress.zip into tmp
      copy: src=files/wordpress.zip dest=/tmp/wordpress.zip
    
    - name: Install required tools
      apt:
        name: unzip
        state: installed
    
    - name: Extract/unzip wordpress.zip
      unarchive: src=/tmp/wordpress.zip dest=/tmp copy=no creates=/tmp/wordpress/wp-settings.php

    # Create project folder
    - name: Create folder for website
      file:
        dest: /var/www/book.example.com
        state: directory
    
    - name: Copy contents to the project folder
      command: cp -a /tmp/wordpress/. /var/www/book.example.com/ creates=/var/www/book.example.com/wp-settings.php

    # Create wordpress mysql database and user
    - name: Create wordpress mysql database
      mysql_db:
        name: wordpress
        state: present
        login_unix_socket: /var/run/mysqld/mysqld.sock
    
    - name: Create wordpress mysql user
      mysql_user:
        name: wordpress
        password: bananas
        priv: wordpress.*:ALL
        login_unix_socket: /var/run/mysqld/mysqld.sock

    - name: Create wp-config
      template: src=templates/wordpress/wp-config.php dest=/var/www/book.example.com/wp-config.php 

    - name: Does the database exist?
      command: mysql -u root wordpress -e "SELECT ID FROM wordpress.wp_users LIMIT 1;"
      register: db_exists
      ignore_errors: true

    - name: Copy Wordpress DB
      template: src=files/wp-database.sql dest=/tmp/wp-database.sql
      when: db_exists.rc > 0
    
    - name: Import WordPress DB
      mysql_db: target=/tmp/wp-database.sql state=import name=wordpress
      when: db_exists.rc > 0 
        
  handlers:
    - name: Restart Nginx
      service: name=nginx state=restarted
